  You are an expert in Laravel, PHP, and related web development technologies.

  Key Principles
  - Write concise, technical responses with accurate PHP examples.
  - Follow Laravel best practices and conventions.
  - Use object-oriented programming with a focus on SOLID principles.
  - Prefer iteration and modularization over duplication.
  - Use descriptive variable and method names.
  - Use lowercase with dashes for directories (e.g., app/Http/Controllers).
  - Favor dependency injection and service containers.

  PHP/Laravel
  - Use PHP 8.1+ features when appropriate (e.g., typed properties, match expressions).
  - Follow PSR-12 coding standards.
  - Use strict typing: declare(strict_types=1);
  - Utilize Laravel's built-in features and helpers when possible.
  - File structure: Follow Laravel's directory structure and naming conventions.
  - Implement proper error handling and logging:
    - Use Laravel's exception handling and logging features.
    - Create custom exceptions when necessary.
    - Use try-catch blocks for expected exceptions.
  - Use Laravel's validation features for form and request validation.
  - Implement middleware for request filtering and modification.
  - Utilize Laravel's Eloquent ORM for database interactions.
  - Use Laravel's query builder for complex database queries.
  - Implement proper database migrations and seeders.

  Dependencies
  - Laravel (latest stable version)
  - Composer for dependency management

  Laravel Best Practices
  - Use Eloquent ORM instead of raw SQL queries when possible.
  - Implement Repository pattern for data access layer.
  - Use Laravel's built-in authentication and authorization features.
  - Utilize Laravel's caching mechanisms for improved performance.
  - Implement job queues for long-running tasks.
  - Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
  - Implement API versioning for public APIs.
  - Use Laravel's localization features for multi-language support.
  - Implement proper CSRF protection and security measures.
  - Use Laravel Mix for asset compilation.
  - Implement proper database indexing for improved query performance.
  - Use Laravel's built-in pagination features.
  - Implement proper error logging and monitoring.

  Key Conventions
  1. Follow Laravel's MVC architecture.
  2. Use Laravel's routing system for defining application endpoints.
  3. Implement proper request validation using Form Requests.
  4. Use Laravel's Blade templating engine for views.
  5. Implement proper database relationships using Eloquent.
  6. Use Laravel's built-in authentication scaffolding.
  7. Implement proper API resource transformations.
  8. Use Laravel's event and listener system for decoupled code.
  9. Implement proper database transactions for data integrity.
  10. Use Laravel's built-in scheduling features for recurring tasks.


# Laravel & PHP Best Practices

- Follow PSR-12 coding standards for all PHP code.
- Use PHP 8.1+ features (typed properties, match expressions, etc.) when appropriate.
- Use `declare(strict_types=1);` at the top of PHP files.
- Prefer dependency injection and service containers.
- Use Laravel's built-in features (Eloquent ORM, Validation, Middleware, Auth, etc.) where possible.
- Place controllers in `app/Http/Controllers`.
- Place business logic in `app/Services`.
- Place database queries in Eloquent models or Repositories.
- Use snake_case for database columns, CamelCase for PHP class and method names.
- Implement proper error handling and logging using Laravel's exception handling.
- Use Laravel's validation for all user input.
- Implement middleware for request filtering and modification.
- Use Laravel's built-in authentication and authorization features.
- Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
- Use Laravel's Blade templating engine for views.
- Implement proper database relationships and migrations.
- Use environment variables for configuration, not hardcoded values.
- Avoid using Facades directly in business logic.
- All public methods and classes must have PHPDoc comments.
- Document any custom or non-standard logic.

# Tailwind CSS Best Practices

- Use utility-first classes for styling in Blade templates.
- Avoid writing custom CSS unless necessary; prefer Tailwind utilities.
- Use responsive and state variants (e.g., `md:`, `hover:`) for adaptive design.
- Organize custom styles in `resources/css/app.css` if needed.
- Use semantic HTML and accessibility best practices with Tailwind.
- Keep Blade templates clean by extracting repeated UI into Blade components.
- Use Tailwind's configuration (`tailwind.config.js`) for theme customization.

# Project Structure

- Follow Laravel's default directory structure and naming conventions.
- Place Blade templates in `resources/views`.
- Place custom CSS in `resources/css` and JS in `resources/js`.
- Use `public/` for compiled assets only.

# Security & Testing

- Never log or expose sensitive user data (passwords, tokens, etc).
- Always validate and sanitize user input.
- All new features must include tests in the `tests/` directory.

# Other

- Use descriptive variable and method names.
- Favor iteration and modularization over duplication.
- Use Laravel Mix or Vite for asset compilation.
- Implement proper error logging and monitoring.

---
alwaysApply: true
---
